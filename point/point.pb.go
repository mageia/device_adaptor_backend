// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: point.proto

/*
	Package point is a generated protocol buffer package.

	It is generated from these files:
		point.proto

	It has these top-level messages:
		PointDefine
*/
package point

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PointTypeDefine int32

const (
	PointTypeDefine_Analog  PointTypeDefine = 0
	PointTypeDefine_Digital PointTypeDefine = 1
)

var PointTypeDefine_name = map[int32]string{
	0: "Analog",
	1: "Digital",
}
var PointTypeDefine_value = map[string]int32{
	"Analog":  0,
	"Digital": 1,
}

func (x PointTypeDefine) String() string {
	return proto.EnumName(PointTypeDefine_name, int32(x))
}
func (PointTypeDefine) EnumDescriptor() ([]byte, []int) { return fileDescriptorPoint, []int{0} }

type PointDefine struct {
	Address   string            `protobuf:"bytes,1,opt,name=ListenAddress,proto3" json:"ListenAddress,omitempty"`
	Label     string            `protobuf:"bytes,2,opt,name=Label,proto3" json:"Label,omitempty"`
	Name      string            `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Unit      string            `protobuf:"bytes,4,opt,name=Unit,proto3" json:"Unit,omitempty"`
	Desc      string            `protobuf:"bytes,5,opt,name=Desc,proto3" json:"Desc,omitempty"`
	PointType PointTypeDefine   `protobuf:"varint,6,opt,name=PointType,proto3,enum=point.PointTypeDefine" json:"PointType,omitempty"`
	Tags      []string          `protobuf:"bytes,7,rep,name=Tags" json:"Tags,omitempty"`
	Parameter float32           `protobuf:"fixed32,8,opt,name=Parameter,proto3" json:"Parameter,omitempty"`
	Option    map[int32]string  `protobuf:"bytes,9,rep,name=Option" json:"Option,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Extra     map[string]string `protobuf:"bytes,10,rep,name=Extra" json:"Extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *PointDefine) Reset()                    { *m = PointDefine{} }
func (m *PointDefine) String() string            { return proto.CompactTextString(m) }
func (*PointDefine) ProtoMessage()               {}
func (*PointDefine) Descriptor() ([]byte, []int) { return fileDescriptorPoint, []int{0} }

func (m *PointDefine) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *PointDefine) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *PointDefine) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PointDefine) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *PointDefine) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *PointDefine) GetPointType() PointTypeDefine {
	if m != nil {
		return m.PointType
	}
	return PointTypeDefine_Analog
}

func (m *PointDefine) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *PointDefine) GetParameter() float32 {
	if m != nil {
		return m.Parameter
	}
	return 0
}

func (m *PointDefine) GetOption() map[int32]string {
	if m != nil {
		return m.Option
	}
	return nil
}

func (m *PointDefine) GetExtra() map[string]string {
	if m != nil {
		return m.Extra
	}
	return nil
}

func init() {
	proto.RegisterType((*PointDefine)(nil), "point.PointDefine")
	proto.RegisterEnum("point.PointTypeDefine", PointTypeDefine_name, PointTypeDefine_value)
}
func (m *PointDefine) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PointDefine) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPoint(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.Label) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPoint(dAtA, i, uint64(len(m.Label)))
		i += copy(dAtA[i:], m.Label)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPoint(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Unit) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPoint(dAtA, i, uint64(len(m.Unit)))
		i += copy(dAtA[i:], m.Unit)
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPoint(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if m.PointType != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPoint(dAtA, i, uint64(m.PointType))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Parameter != 0 {
		dAtA[i] = 0x45
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Parameter))))
		i += 4
	}
	if len(m.Option) > 0 {
		for k, _ := range m.Option {
			dAtA[i] = 0x4a
			i++
			v := m.Option[k]
			mapSize := 1 + sovPoint(uint64(k)) + 1 + len(v) + sovPoint(uint64(len(v)))
			i = encodeVarintPoint(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintPoint(dAtA, i, uint64(k))
			dAtA[i] = 0x12
			i++
			i = encodeVarintPoint(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Extra) > 0 {
		for k, _ := range m.Extra {
			dAtA[i] = 0x52
			i++
			v := m.Extra[k]
			mapSize := 1 + len(k) + sovPoint(uint64(len(k))) + 1 + len(v) + sovPoint(uint64(len(v)))
			i = encodeVarintPoint(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintPoint(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintPoint(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func encodeVarintPoint(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PointDefine) Size() (n int) {
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovPoint(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovPoint(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPoint(uint64(l))
	}
	l = len(m.Unit)
	if l > 0 {
		n += 1 + l + sovPoint(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovPoint(uint64(l))
	}
	if m.PointType != 0 {
		n += 1 + sovPoint(uint64(m.PointType))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovPoint(uint64(l))
		}
	}
	if m.Parameter != 0 {
		n += 5
	}
	if len(m.Option) > 0 {
		for k, v := range m.Option {
			_ = k
			_ = v
			mapEntrySize := 1 + sovPoint(uint64(k)) + 1 + len(v) + sovPoint(uint64(len(v)))
			n += mapEntrySize + 1 + sovPoint(uint64(mapEntrySize))
		}
	}
	if len(m.Extra) > 0 {
		for k, v := range m.Extra {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPoint(uint64(len(k))) + 1 + len(v) + sovPoint(uint64(len(v)))
			n += mapEntrySize + 1 + sovPoint(uint64(mapEntrySize))
		}
	}
	return n
}

func sovPoint(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPoint(x uint64) (n int) {
	return sovPoint(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PointDefine) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PointDefine: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PointDefine: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListenAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PointType", wireType)
			}
			m.PointType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PointType |= (PointTypeDefine(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameter", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Parameter = float32(math.Float32frombits(v))
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Option", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoint
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Option == nil {
				m.Option = make(map[int32]string)
			}
			var mapkey int32
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPoint
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPoint
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPoint
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPoint
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPoint(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPoint
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Option[mapkey] = mapvalue
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoint
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Extra == nil {
				m.Extra = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPoint
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPoint
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPoint
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPoint
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPoint
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPoint(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPoint
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Extra[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPoint(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPoint
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPoint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPoint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPoint
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPoint
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPoint(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPoint = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPoint   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("point.proto", fileDescriptorPoint) }

var fileDescriptorPoint = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xc1, 0x4a, 0xf3, 0x40,
	0x14, 0x85, 0x3b, 0x4d, 0x93, 0xfe, 0xb9, 0x81, 0xdf, 0x70, 0x11, 0x19, 0x8a, 0x86, 0xe0, 0x2a,
	0x74, 0xd1, 0x45, 0x2b, 0x52, 0xdd, 0x55, 0xda, 0x9d, 0x68, 0x09, 0xf5, 0x01, 0xa6, 0x76, 0x2c,
	0xc1, 0x74, 0x12, 0x26, 0xa3, 0xd8, 0x37, 0xf1, 0x7d, 0xdc, 0xb8, 0xf4, 0x11, 0xa4, 0xbe, 0x88,
	0xcc, 0x8c, 0xb5, 0x41, 0x04, 0x77, 0xe7, 0x7e, 0xb9, 0xe7, 0xdc, 0xe1, 0x10, 0x08, 0xca, 0x22,
	0x13, 0xaa, 0x57, 0xca, 0x42, 0x15, 0xe8, 0x9a, 0xe1, 0xf8, 0xc5, 0x81, 0x60, 0xaa, 0xd5, 0x98,
	0xdf, 0x65, 0x82, 0x23, 0x85, 0xf6, 0x68, 0xb1, 0x90, 0xbc, 0xaa, 0x28, 0x89, 0x49, 0xe2, 0xa7,
	0xdb, 0x11, 0xf7, 0xc1, 0xbd, 0x64, 0x73, 0x9e, 0xd3, 0xa6, 0xe1, 0x76, 0x40, 0x84, 0xd6, 0x15,
	0x5b, 0x71, 0xea, 0x18, 0x68, 0xb4, 0x66, 0x37, 0x22, 0x53, 0xb4, 0x65, 0x99, 0xd6, 0x9a, 0x8d,
	0x79, 0x75, 0x4b, 0x5d, 0xcb, 0xb4, 0xc6, 0x13, 0xf0, 0xcd, 0xe9, 0xd9, 0xba, 0xe4, 0xd4, 0x8b,
	0x49, 0xf2, 0xbf, 0x7f, 0xd0, 0xb3, 0x6f, 0xfc, 0xe6, 0xf6, 0x59, 0xe9, 0x6e, 0x51, 0x27, 0xcd,
	0xd8, 0xb2, 0xa2, 0xed, 0xd8, 0xd1, 0x49, 0x5a, 0xe3, 0x21, 0xf8, 0x53, 0x26, 0xd9, 0x8a, 0x2b,
	0x2e, 0xe9, 0xbf, 0x98, 0x24, 0xcd, 0x74, 0x07, 0xf0, 0x14, 0xbc, 0xeb, 0x52, 0x65, 0x85, 0xa0,
	0x7e, 0xec, 0x24, 0x41, 0x3f, 0xaa, 0x1f, 0xb1, 0x07, 0x7a, 0x76, 0x61, 0x22, 0x94, 0x5c, 0xa7,
	0x5f, 0xdb, 0x38, 0x00, 0x77, 0xf2, 0xa4, 0x24, 0xa3, 0x60, 0x6c, 0x47, 0xbf, 0xd8, 0xcc, 0x77,
	0xeb, 0xb2, 0xbb, 0x9d, 0x33, 0x08, 0x6a, 0x59, 0x18, 0x82, 0x73, 0xcf, 0xd7, 0xa6, 0x4b, 0x37,
	0xd5, 0x52, 0xf7, 0xf8, 0xc8, 0xf2, 0x07, 0xbe, 0xed, 0xd1, 0x0c, 0xe7, 0xcd, 0x21, 0xe9, 0x0c,
	0x01, 0x76, 0x79, 0x75, 0xa7, 0xff, 0x87, 0xb3, 0xdb, 0x85, 0xbd, 0x1f, 0x8d, 0x21, 0x80, 0x37,
	0x12, 0x2c, 0x2f, 0x96, 0x61, 0x03, 0x03, 0x68, 0x8f, 0xb3, 0x65, 0xa6, 0x58, 0x1e, 0x92, 0x8b,
	0xf0, 0x75, 0x13, 0x91, 0xb7, 0x4d, 0x44, 0xde, 0x37, 0x11, 0x79, 0xfe, 0x88, 0x1a, 0x73, 0xcf,
	0xfc, 0x11, 0x83, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4b, 0xf4, 0xf6, 0x0f, 0x20, 0x02, 0x00,
	0x00,
}
